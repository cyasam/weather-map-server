{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.59d1615fa02e20afffca.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import { Component } from 'react';\nimport { appReq, googleMapInit } from '../helpers';\n\nclass App extends Component {\n  state = {\n    map: null,\n    mapCenter: {\n      lat: 52.026,\n      lng: 15.0551,\n    },\n    cities: [\n      {\n        name: 'Berlin',\n        lat: 52.52,\n        lng: 13.405,\n      },\n      {\n        name: 'London',\n        lat: 51.5074,\n        lng: -0.1182,\n      },\n      {\n        name: 'Paris',\n        lat: 48.8622,\n        lng: 2.3638,\n      },\n      {\n        name: 'Milan',\n        lat: 45.4807,\n        lng: 9.1713,\n      },\n      {\n        name: 'Vienna',\n        lat: 48.2096,\n        lng: 16.4113,\n      },\n      {\n        name: 'Stockholm',\n        lat: 59.3309,\n        lng: 18.0809,\n      },\n      {\n        name: 'Oslo',\n        lat: 59.9114,\n        lng: 10.7325,\n      },\n      {\n        name: 'Moskow',\n        lat: 55.7901,\n        lng: 37.6425,\n      },\n      {\n        name: 'Warsaw',\n        lat: 52.2297,\n        lng: 21.0122,\n      },\n    ],\n  };\n  componentDidMount() {\n    if (!this.state.map) {\n      googleMapInit()\n        .then(() => {\n          return this.onLoadGoogleMapsScript();\n        })\n        .then(responses => {\n          responses.forEach(response => {\n            const {\n              currently: { icon },\n              latitude,\n              longitude,\n            } = response.data;\n            this.createMarkers(latitude, longitude, icon);\n          });\n        });\n    }\n  }\n\n  createMarkers(lat, lng, icon) {\n    const iconBase = '/static/images/weather-icons';\n\n    const iconObj = {\n      url: `${iconBase}/${icon}.svg`,\n      scaledSize: new google.maps.Size(36, 36),\n      anchor: new google.maps.Point(16, 50),\n    };\n\n    // Create markers.\n    const marker = new google.maps.Marker({\n      position: new google.maps.LatLng(lat, lng),\n      icon: iconObj,\n      map: this.state.map,\n    });\n  }\n\n  onLoadGoogleMapsScript() {\n    const { mapCenter, cities } = this.state;\n    const { lat, lng } = mapCenter;\n\n    this.setState({\n      map: new google.maps.Map(document.getElementById('map'), {\n        center: { lat, lng },\n        zoom: 5,\n      }),\n    });\n\n    const promiseCities = cities.map(city => {\n      return appReq.get(`/get-weather?latlng=${city.lat},${city.lng}`);\n    });\n\n    return Promise.all(promiseCities);\n  }\n\n  render() {\n    return (\n      <div id=\"map-wrapper\">\n        <div id=\"map\" />\n        <style global jsx>\n          {`\n            html,\n            body,\n            #__next {\n              width: 100%;\n              height: 100%;\n              margin: 0;\n              padding: 0;\n            }\n            #map-wrapper,\n            #map {\n              display: flex;\n              width: 100%;\n              height: 100%;\n            }\n          `}\n        </style>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AA/CA;AACA;;;;;;AAqDA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AAEA;AACA;AACA;AACA;AAHA;AACA;AAMA;AACA;AACA;AACA;AAHA;AAKA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAFA;AADA;AAOA;AACA;AACA;AAEA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAsBA;;;;AArIA;AACA;AAuIA;;;;A","sourceRoot":""}