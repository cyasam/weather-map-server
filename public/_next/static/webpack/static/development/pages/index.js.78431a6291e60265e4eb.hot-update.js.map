{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.78431a6291e60265e4eb.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import { Component } from 'react';\nimport { appReq, googleMapInit } from '../helpers';\nimport cities from '../static/json/cities.json';\nimport mapStyle from '../static/json/map-style.json';\n\nclass App extends Component {\n  state = {\n    map: null,\n    mapCenter: {\n      lat: 51.026,\n      lng: 11.5551,\n    },\n    cities: [],\n  };\n  componentDidMount() {\n    this.setState({\n      cities,\n    });\n\n    if (!this.state.map) {\n      googleMapInit()\n        .then(() => {\n          return this.onLoadGoogleMapsScript();\n        })\n        .then(responses => {\n          responses.forEach(response => {\n            if (response) {\n              const {\n                weather: [{ icon }],\n                coord: { lat, lon: lng },\n              } = response.data;\n              this.createMarkers({ lat, lng, icon });\n            }\n          });\n        });\n    }\n  }\n\n  createMarkers({ lat, lng, icon }) {\n    const iconBase = 'http://openweathermap.org/img/w';\n    const iconSize = {\n      width: 50,\n      height: 50,\n    };\n\n    const city = cities.find(city => {\n      return (\n        Number(city.lat.toFixed(2)) === lat &&\n        Number(city.lng.toFixed(2)) === lng &&\n        city.markerOffset\n      );\n    });\n\n    const markerOffset = city ? city.markerOffset : 0;\n\n    const iconObj = {\n      url: `${iconBase}/${icon}.png`,\n      anchor: new google.maps.Point(\n        iconSize.width / 2,\n        iconSize.width + 6 + markerOffset,\n      ),\n    };\n\n    // Create markers.\n    const marker = new google.maps.Marker({\n      position: new google.maps.LatLng(lat, lng),\n      icon: iconObj,\n      map: this.state.map,\n    });\n  }\n\n  onLoadGoogleMapsScript() {\n    const { mapCenter, cities } = this.state;\n    const { lat, lng } = mapCenter;\n\n    const nowHour = new Date().getHours();\n    console.log(nowHour);\n\n    this.setState({\n      map: new google.maps.Map(document.getElementById('map'), {\n        center: { lat, lng },\n        zoom: 5,\n        minZoom: 5,\n        maxZoom: 8,\n        styles: nowHour >= 18 && nowHour < 6 ? mapStyle.night : mapStyle.day,\n      }),\n    });\n\n    const promiseCities = cities.map(city => {\n      return appReq.get(`/get-weather?latlng=${city.lat},${city.lng}`);\n    });\n\n    return Promise.all(promiseCities);\n  }\n\n  render() {\n    return (\n      <div id=\"map-wrapper\">\n        <div id=\"map\" />\n        <style global jsx>\n          {`\n            html,\n            body,\n            #__next {\n              width: 100%;\n              height: 100%;\n              margin: 0;\n              padding: 0;\n            }\n            #map-wrapper,\n            #map {\n              display: flex;\n              width: 100%;\n              height: 100%;\n            }\n          `}\n        </style>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AANA;AACA;;;;;;AAOA;AAAA;AACA;AAAA;AACA;AADA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AAKA;AAEA;AAEA;AACA;AACA;AAFA;AACA;AAQA;AACA;AACA;AACA;AAHA;AAKA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AALA;AADA;AAUA;AACA;AACA;AAEA;AACA;;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAsBA;;;;AAlHA;AACA;AAoHA;;;;A","sourceRoot":""}